# -*- coding: utf-8 -*-
"""EPL matches first.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19dheeuIitH0ohi9sN9Qk84qYRC2khyI-

#Sourav Mishra(19MA40022)
"""

import pandas as pd
import numpy as np

train = pd.read_csv('/content/drive/MyDrive/EPL_DS_Challenge/epl_matches_train.csv')

test = pd.read_csv('/content/drive/MyDrive/EPL_DS_Challenge/epl_matches_test.csv')
test.head()

teams = pd.read_csv('/content/drive/MyDrive/EPL_DS_Challenge/epl_teams.csv')

train['match_result'] = 0
for i in range(len(train)):
  if train['home_team_goal'].iloc[i]>train['away_team_goal'].iloc[i]:
      train['match_result'].iloc[i] = 'won'
  elif train['home_team_goal'].iloc[i]<train['away_team_goal'].iloc[i]:
      train['match_result'].iloc[i] = 'lose'
  else:
      train['match_result'].iloc[i] = 'draw'

train.head()

train_data = train[['season', 'stage', 'match_id', 'home_team_id', 'away_team_id', 'match_result']]

teams.head()

team_data = teams[['team_id', 'buildUpPlaySpeed', 'buildUpPlayDribblingClass', 'buildUpPlayPassing','buildUpPlayPositioningClass', 'chanceCreationPassing', 'chanceCreationCrossing', 'chanceCreationShooting', 'chanceCreationPositioningClass', 'defencePressure', 'defenceAggression', 'defenceTeamWidth', 'defenceDefenderLineClass' ]]

team_data.head()

team_data.defenceDefenderLineClass.value_counts()

team_data['buildUpPlayDribblingClass'].replace({'Little':1, 'Normal':2}, inplace = True)
team_data['buildUpPlayPositioningClass'] = pd.get_dummies(team_data['buildUpPlayPositioningClass'], drop_first=True)
team_data['chanceCreationPositioningClass'] = pd.get_dummies(team_data['chanceCreationPositioningClass'], drop_first=True)
team_data['defenceDefenderLineClass'].replace({'Cover':1}, inplace = True)
team_data.head()

columns = ['buildUpPlaySpeed', 'buildUpPlayPassing', 'chanceCreationPassing', 'chanceCreationCrossing', 'chanceCreationShooting', 'defencePressure', 'defenceAggression', 'defenceTeamWidth' ]

team_id = team_data['team_id'].unique()
team_id2 = []
buildUpPlayDribblingClass = []
buildUpPlayPositioningClass = []
chanceCreationPositioningClass = []
teams_new= []
for i in team_id:
  data = team_data[team_data['team_id']==i]
  team_id2.append(i)
  buildUpPlayDribblingClass.append(data['buildUpPlayDribblingClass'].mode()[0])
  buildUpPlayPositioningClass.append(data['buildUpPlayPositioningClass'].mode()[0])
  chanceCreationPositioningClass.append(data['chanceCreationPositioningClass'].mode()[0])

  teams_new.append(data[columns].mean(skipna = True))

teams_data = pd.DataFrame()
teams_data['team_id'] = team_id2
teams_data['buildUpPlayDribblingClass'] = buildUpPlayDribblingClass
teams_data['buildUpPlayPositioningClass'] = buildUpPlayPositioningClass
teams_data['chanceCreationPositioningClass'] = chanceCreationPositioningClass
teams_data['defenceDefenderLineClass'] = np.ones(len(teams_new))
teams_data[columns] = teams_new
teams_data.head()

columns = ['buildUpPlayDribblingClass','buildUpPlayPositioningClass','chanceCreationPositioningClass', 'defenceDefenderLineClass', 'buildUpPlaySpeed', 'buildUpPlayPassing', 'chanceCreationPassing', 'chanceCreationCrossing', 'chanceCreationShooting', 'defencePressure', 'defenceAggression', 'defenceTeamWidth' ]

trains= pd.DataFrame()
temp = []
season = []
stage = []
match_id = []
home_team_id = []
away_team_id = []
match_result = []
buildUpPlayDribblingClass = []
buildUpPlayPositioningClass = []
chanceCreationPositioningClass = []
defenceDefenderLineClass = []
buildUpPlaySpeed = []
buildUpPlayPassing = []
chanceCreationPassing = []
chanceCreationCrossing = []
chanceCreationShooting = []
defencePressure = []
defenceAggression = []
defenceTeamWidth = []
for i in range(len(train_data['home_team_id'])):
  k = train_data['home_team_id'].iloc[i]
  team = teams_data[teams_data['team_id']== k]
  #trains.append(team['buildUpPlaySpeed'])
  season.append(train_data['season'].iloc[i])
  stage.append(train_data['stage'].iloc[i])
  match_id.append(train_data['match_id'].iloc[i])
  home_team_id.append(train_data['home_team_id'].iloc[i])
  away_team_id.append(train_data['away_team_id'].iloc[i])
  k = int(team['buildUpPlayDribblingClass'])
  buildUpPlayDribblingClass.append(k)
  #print(int(team['buildUpPlayPositioningClass']))
  #print(float(team['chanceCreationPassing']))
  buildUpPlayPositioningClass.append(int(team['buildUpPlayPositioningClass']))
  chanceCreationPositioningClass.append(int(team['chanceCreationPositioningClass']))
  defenceDefenderLineClass.append(int(team['defenceDefenderLineClass']))
  buildUpPlaySpeed.append(float(team['buildUpPlaySpeed']))
  buildUpPlayPassing.append(float(team['buildUpPlayPassing']))
  chanceCreationPassing.append(float(team['chanceCreationPassing']))
  chanceCreationCrossing.append(float(team['chanceCreationCrossing']))
  chanceCreationShooting.append(float(team['chanceCreationShooting']))
  defencePressure.append(float(team['defencePressure']))
  defenceAggression.append(float(team['defenceAggression']))
  defenceTeamWidth.append(float(team['defenceTeamWidth']))
  match_result.append(train_data['match_result'].iloc[i])

trains = pd.DataFrame({'season':season, 'stage':stage, 'match_id':match_id, 'home_team_id':home_team_id, 'away_team_id':away_team_id})
trains['match_result'] = match_result
trains['buildUpPlayDribblingClass_home'] = buildUpPlayDribblingClass
trains['buildUpPlayPositioningClass_home'] = buildUpPlayPositioningClass
trains['chanceCreationPositioningClass_home'] = chanceCreationPositioningClass
trains['defenceDefenderLineClass_home'] = defenceDefenderLineClass
trains['buildUpPlaySpeed_home'] = buildUpPlaySpeed
trains['buildUpPlayPassing_home'] = buildUpPlayPassing
trains['chanceCreationPassing_home'] = chanceCreationPassing
trains['chanceCreationCrossing_home'] = chanceCreationCrossing
trains['chanceCreationShooting_home'] = chanceCreationShooting
trains['defencePressure_home'] = defencePressure
trains['defenceAggression_home'] = defenceAggression
trains['defenceTeamWidth_home'] = defenceTeamWidth
#trains.head()

temp = []
season = []
stage = []
match_id = []
home_team_id = []
away_team_id = []
match_result = []
buildUpPlayDribblingClass = []
buildUpPlayPositioningClass = []
chanceCreationPositioningClass = []
defenceDefenderLineClass = []
buildUpPlaySpeed = []
buildUpPlayPassing = []
chanceCreationPassing = []
chanceCreationCrossing = []
chanceCreationShooting = []
defencePressure = []
defenceAggression = []
defenceTeamWidth = []
for i in range(len(train_data['away_team_id'])):
  k = train_data['away_team_id'].iloc[i]
  team = teams_data[teams_data['team_id']== k]
  #trains.append(team['buildUpPlaySpeed'])
  #season.append(train_data['season'].iloc[i])
  #stage.append(train_data['stage'].iloc[i])
  #match_id.append(train_data['match_id'].iloc[i])
  #home_team_id.append(train_data['home_team_id'].iloc[i])
  #away_team_id.append(train_data['away_team_id'].iloc[i])
  p = int(team['buildUpPlayDribblingClass'])
  buildUpPlayDribblingClass.append(p)
  #print(int(team['buildUpPlayPositioningClass']))
  #print(float(team['chanceCreationPassing']))
  buildUpPlayPositioningClass.append(int(team['buildUpPlayPositioningClass']))
  chanceCreationPositioningClass.append(int(team['chanceCreationPositioningClass']))
  defenceDefenderLineClass.append(int(team['defenceDefenderLineClass']))
  buildUpPlaySpeed.append(float(team['buildUpPlaySpeed']))
  buildUpPlayPassing.append(float(team['buildUpPlayPassing']))
  chanceCreationPassing.append(float(team['chanceCreationPassing']))
  chanceCreationCrossing.append(float(team['chanceCreationCrossing']))
  chanceCreationShooting.append(float(team['chanceCreationShooting']))
  defencePressure.append(float(team['defencePressure']))
  defenceAggression.append(float(team['defenceAggression']))
  defenceTeamWidth.append(float(team['defenceTeamWidth']))
  #match_result.append(train_data['match_result'].iloc[i])

#trains = pd.DataFrame({'season':season, 'stage':stage, 'match_id':match_id, 'home_team_id':home_team_id, 'away_team_id':away_team_id})
#trains['match_result'] = match_result
trains['buildUpPlayDribblingClass_away'] = buildUpPlayDribblingClass
trains['buildUpPlayPositioningClass_away'] = buildUpPlayPositioningClass
trains['chanceCreationPositioningClass_away'] = chanceCreationPositioningClass
trains['defenceDefenderLineClass_away'] = defenceDefenderLineClass
trains['buildUpPlaySpeed_away'] = buildUpPlaySpeed
trains['buildUpPlayPassing_away'] = buildUpPlayPassing
trains['chanceCreationPassing_away'] = chanceCreationPassing
trains['chanceCreationCrossing_away'] = chanceCreationCrossing
trains['chanceCreationShooting_away'] = chanceCreationShooting
trains['defencePressure_away'] = defencePressure
trains['defenceAggression_away'] = defenceAggression
trains['defenceTeamWidth_away'] = defenceTeamWidth
trains.head()

columns = trains.columns[6:]

columns

trains.drop(['season', 'stage', 'match_id', 'home_team_id', 'away_team_id', 'buildUpPlayDribblingClass_home', 'buildUpPlayPositioningClass_home', 'defenceDefenderLineClass_home', 'defenceDefenderLineClass_away','buildUpPlayPositioningClass_away', 'buildUpPlayDribblingClass_away' ], axis = 1, inplace = True)

mat = trains.drop('match_result', axis = 1)
import matplotlib.pyplot as plt
import seaborn as sns
corrMat = mat.corr()
mask = np.array(corrMat)
mask[np.tril_indices_from(mask)] = False
fig,ax = plt.subplots()
fig.set_size_inches(15, 15)
sns.heatmap(corrMat, mask = mask, vmax = 0.8, square = True, annot = True)
plt.show()

trains.drop(['buildUpPlayPassing_home', 'buildUpPlayPassing_away'], axis = 1, inplace = True)
mat = trains.drop('match_result', axis = 1)
import matplotlib.pyplot as plt
import seaborn as sns
corrMat = mat.corr()
mask = np.array(corrMat)
mask[np.tril_indices_from(mask)] = False
fig,ax = plt.subplots()
fig.set_size_inches(15, 15)
sns.heatmap(corrMat, mask = mask, vmax = 0.8, square = True, annot = True)
plt.show()



trains['match_result'].replace({'lose':0, 'draw':1, 'won':2}, inplace = True)

X = trains.drop( 'match_result', axis = 1)
Y = trains['match_result']

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import BaggingClassifier
from xgboost import XGBClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import accuracy_score

from sklearn.model_selection import train_test_split

train_x, test_x, train_y, test_y = train_test_split(X,Y)

models = [LogisticRegression(), SGDClassifier(), RandomForestClassifier(), AdaBoostClassifier(), BaggingClassifier(), XGBClassifier(), DecisionTreeClassifier(), KNeighborsClassifier(), SVC()]

model_names = [ 'Logistic Regression', 'SGDClassifier', 'Random forest', 'Adaboost', 'Bagging','XGBoost', 'DecisionTree', 'K nearest neighbors',  'SVC']

accuracy = []
for model in range(len(models)):
    mod = models[model]
    mod.fit(train_x, train_y)
    pred = mod.predict(test_x)
    #print(model)
    accuracy.append(accuracy_score(test_y, pred))

result = {'model names':model_names, 'Accuracy': accuracy}
result = pd.DataFrame(result)

result

boost = AdaBoostClassifier()

from sklearn.model_selection import RandomizedSearchCV

n_estimators = [int(x) for x in np.linspace(start=30, stop = 300, num = 10)]
learning_rate  = [0.5,0.05,1,1.5,2]

random_grid = {
    'n_estimators':n_estimators,
    'learning_rate': learning_rate
  
}
rf_random = RandomizedSearchCV(estimator=boost, param_distributions=random_grid, n_iter = 100, cv = 5, verbose=2, n_jobs=-1)
rf_random.fit(train_x, train_y)

rf_random.best_params_

!pip install tpot

from tpot import TPOTClassifier

tpot_classifier = TPOTClassifier(generations= 5, population_size= 24, offspring_size= 12,
                                 verbosity= 2, early_stop= 12,
                                 config_dict={'sklearn.ensemble.AdaBoostClassifier': random_grid}, 
                                 cv = 4, scoring = None)

tpot_classifier.fit(train_x,train_y)

pred_gen = tpot_classifier.predict(test_x)
accuracy_score(test_y, pred_gen)

best_est = rf_random.best_estimator_
pred_best = best_est.predict(test_x)
accuracy_score(test_y, pred_best)

test.head()

teams_data.head()

tests= pd.DataFrame()
temp = []
season = []
stage = []
match_id = []
home_team_id = []
away_team_id = []
match_result = []
buildUpPlayDribblingClass = []
buildUpPlayPositioningClass = []
chanceCreationPositioningClass = []
defenceDefenderLineClass = []
buildUpPlaySpeed = []
buildUpPlayPassing = []
chanceCreationPassing = []
chanceCreationCrossing = []
chanceCreationShooting = []
defencePressure = []
defenceAggression = []
defenceTeamWidth = []
for i in range(len(test['home_team_id'])):
  k = test['home_team_id'].iloc[i]
  team = teams_data[teams_data['team_id']== k]
  #trains.append(team['buildUpPlaySpeed'])
  season.append(test['season'].iloc[i])
  stage.append(test['stage'].iloc[i])
  match_id.append(test['match_id'].iloc[i])
  home_team_id.append(test['home_team_id'].iloc[i])
  away_team_id.append(test['away_team_id'].iloc[i])
  k = int(team['buildUpPlayDribblingClass'])
  buildUpPlayDribblingClass.append(k)
  #print(int(team['buildUpPlayPositioningClass']))
  #print(float(team['chanceCreationPassing']))
  buildUpPlayPositioningClass.append(int(team['buildUpPlayPositioningClass']))
  chanceCreationPositioningClass.append(int(team['chanceCreationPositioningClass']))
  defenceDefenderLineClass.append(int(team['defenceDefenderLineClass']))
  buildUpPlaySpeed.append(float(team['buildUpPlaySpeed']))
  buildUpPlayPassing.append(float(team['buildUpPlayPassing']))
  chanceCreationPassing.append(float(team['chanceCreationPassing']))
  chanceCreationCrossing.append(float(team['chanceCreationCrossing']))
  chanceCreationShooting.append(float(team['chanceCreationShooting']))
  defencePressure.append(float(team['defencePressure']))
  defenceAggression.append(float(team['defenceAggression']))
  defenceTeamWidth.append(float(team['defenceTeamWidth']))
  #match_result.append(train_data['match_result'].iloc[i])

tests = pd.DataFrame({'season':season, 'stage':stage, 'match_id':match_id, 'home_team_id':home_team_id, 'away_team_id':away_team_id})
#tests['match_result'] = match_result
tests['buildUpPlayDribblingClass_home'] = buildUpPlayDribblingClass
tests['buildUpPlayPositioningClass_home'] = buildUpPlayPositioningClass
tests['chanceCreationPositioningClass_home'] = chanceCreationPositioningClass
tests['defenceDefenderLineClass_home'] = defenceDefenderLineClass
tests['buildUpPlaySpeed_home'] = buildUpPlaySpeed
tests['buildUpPlayPassing_home'] = buildUpPlayPassing
tests['chanceCreationPassing_home'] = chanceCreationPassing
tests['chanceCreationCrossing_home'] = chanceCreationCrossing
tests['chanceCreationShooting_home'] = chanceCreationShooting
tests['defencePressure_home'] = defencePressure
tests['defenceAggression_home'] = defenceAggression
tests['defenceTeamWidth_home'] = defenceTeamWidth
tests.head()

temp = []
season = []
stage = []
match_id = []
home_team_id = []
away_team_id = []
match_result = []
buildUpPlayDribblingClass = []
buildUpPlayPositioningClass = []
chanceCreationPositioningClass = []
defenceDefenderLineClass = []
buildUpPlaySpeed = []
buildUpPlayPassing = []
chanceCreationPassing = []
chanceCreationCrossing = []
chanceCreationShooting = []
defencePressure = []
defenceAggression = []
defenceTeamWidth = []
for i in range(len(test['away_team_id'])):
  k = test['away_team_id'].iloc[i]
  team = teams_data[teams_data['team_id']== k]
  #trains.append(team['buildUpPlaySpeed'])
  #season.append(train_data['season'].iloc[i])
  #stage.append(train_data['stage'].iloc[i])
  #match_id.append(train_data['match_id'].iloc[i])
  #home_team_id.append(train_data['home_team_id'].iloc[i])
  #away_team_id.append(train_data['away_team_id'].iloc[i])
  p = int(team['buildUpPlayDribblingClass'])
  buildUpPlayDribblingClass.append(p)
  #print(int(team['buildUpPlayPositioningClass']))
  #print(float(team['chanceCreationPassing']))
  buildUpPlayPositioningClass.append(int(team['buildUpPlayPositioningClass']))
  chanceCreationPositioningClass.append(int(team['chanceCreationPositioningClass']))
  defenceDefenderLineClass.append(int(team['defenceDefenderLineClass']))
  buildUpPlaySpeed.append(float(team['buildUpPlaySpeed']))
  buildUpPlayPassing.append(float(team['buildUpPlayPassing']))
  chanceCreationPassing.append(float(team['chanceCreationPassing']))
  chanceCreationCrossing.append(float(team['chanceCreationCrossing']))
  chanceCreationShooting.append(float(team['chanceCreationShooting']))
  defencePressure.append(float(team['defencePressure']))
  defenceAggression.append(float(team['defenceAggression']))
  defenceTeamWidth.append(float(team['defenceTeamWidth']))
  #match_result.append(train_data['match_result'].iloc[i])

#trains = pd.DataFrame({'season':season, 'stage':stage, 'match_id':match_id, 'home_team_id':home_team_id, 'away_team_id':away_team_id})
#trains['match_result'] = match_result
tests['buildUpPlayDribblingClass_away'] = buildUpPlayDribblingClass
tests['buildUpPlayPositioningClass_away'] = buildUpPlayPositioningClass
tests['chanceCreationPositioningClass_away'] = chanceCreationPositioningClass
tests['defenceDefenderLineClass_away'] = defenceDefenderLineClass
tests['buildUpPlaySpeed_away'] = buildUpPlaySpeed
tests['buildUpPlayPassing_away'] = buildUpPlayPassing
tests['chanceCreationPassing_away'] = chanceCreationPassing
tests['chanceCreationCrossing_away'] = chanceCreationCrossing
tests['chanceCreationShooting_away'] = chanceCreationShooting
tests['defencePressure_away'] = defencePressure
tests['defenceAggression_away'] = defenceAggression
tests['defenceTeamWidth_away'] = defenceTeamWidth
tests.head()

test_X = tests.drop(['season', 'stage', 'match_id', 'home_team_id', 'away_team_id', 'buildUpPlayDribblingClass_home', 'buildUpPlayPositioningClass_home', 'defenceDefenderLineClass_home', 'defenceDefenderLineClass_away','buildUpPlayPositioningClass_away', 'buildUpPlayDribblingClass_away', 'buildUpPlayPassing_home', 'buildUpPlayPassing_away'], axis = 1)

#lr = LogisticRegression()
boost.fit(train_x, train_y)
predict = boost.predict(test_X)

predict = pd.DataFrame(predict)
map = {0:'lose', 1:'draw', 2:'win'}
predict.replace(map, inplace = True)

predict.head()

df = pd.DataFrame({'season':tests['season'], 'stage':tests['stage'],'match_id':tests['match_id'], 'home_team_id':tests['home_team_id'], 'away_team_id':tests['away_team_id'], 'winning_prediction': predict[0] })

df.head()

df.to_csv('/content/drive/MyDrive/EPL_DS_Challenge/prediction_submission.csv')

